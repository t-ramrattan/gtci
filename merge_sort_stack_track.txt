arr = [3, 2, 1]
// mergeSort(arr, left, right)
> mergeSort([3, 2, 1], 0, 2)
  mid = (0 + 2) // 2 == 1
  > mergeSort([3,2,1], 0, 1)
    mid = (0 + 1) // 2 == 0
    > mergeSort([3, 2, 1], 0, 0)
      0 >= 0 : return
    > mergeSort([3,2,1], 0 + 1, 1)
      1 >= 1 : return
    > merge([3,2,1], 0, 0, 1)
      n1 = 0 - 0 + 1 = 1
      n2 = 1 - 0 = 1
      L = [3] n1 = 1 i = 0, R = [2] n2 = 1 j = 0, k = 0 arr = [3, 2, 1]
      // while i < n1 and j < n2
      0 : L = [3] n1 = 1 i = 0, R = [2] n2 = 1 j = 0, k = 0 arr = [3, 2, 1]
      1 : L = [3] n1 = 1 i = 0, R = [2] n2 = 1 j = 1, k = 1 arr = [2, 2, 1]

      // while i < n1:
      0 : L = [3] n1 = 1 i = 0, R = [2] n2 = 1 j = 1, k = 1 arr = [2, 2, 1]
      1 : L = [3] n1 = 1 i = 1, R = [2] n2 = 1 j = 1, k = 1 arr = [2, 3, 1]

      // while j < n2
      0 : L = [3] n1 = 1 i = 1, R = [2] n2 = 1 j = 1, k = 1 arr = [2, 3, 1]      
      
  > mergeSort([2,3,1], 2, 2)
    2 >= 2: return

  > merge([2, 3, 1], 0, 1, 2)
    n1 = 1 - 0 + 1 == 2
    n2 = 2 - 1 == 1
    L = [2, 3] n1 = 2 i = 0, R = [1] n2 = 1 j = 0, k = 0 arr = [2, 3, 1]

    // while i < n1 and j < n2:
    0: L = [2, 3] n1 = 2 i = 0, R = [1] n2 = 1 j = 0, k = 0 arr = [2, 3, 1]
    1: L = [2, 3] n1 = 2 i = 0, R = [1] n2 = 1 j = 1, k = 1 arr = [1, 3, 1]

    // while i < n1:
    0: L = [2, 3] n1 = 2 i = 0, R = [1] n2 = 1 j = 1, k = 1 arr = [1, 3, 1]
    1: L = [2, 3] n1 = 2 i = 1, R = [1] n2 = 1 j = 1, k = 2 arr = [1, 2, 1]
    2: L = [2, 3] n1 = 2 i = 2, R = [1] n2 = 1 j = 1, k = 3 arr = [1, 2, 3]
